FROM debian:9 AS build

ARG S3FS_VERSION=v1.91
ARG DEBIAN_FRONTEND=noninteractive

ENV DEBCONF_NOWARNINGS="yes"

RUN apt update && \
    apt-get install -y --no-install-recommends apt-utils \
    ca-certificates \
    build-essential \
    git \
    libfuse-dev \
    libcurl4-openssl-dev \
    libxml2-dev \
    mime-support \
    automake \
    libtool && \
    apt install -y --no-install-recommends pkg-config \
    libssl1.0-dev && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

RUN git clone https://github.com/s3fs-fuse/s3fs-fuse && \
    cd s3fs-fuse && \
    autoupdate && ./autogen.sh && \
    ./configure --prefix=/usr --with-openssl && \
    make && make install



FROM debian:9

# Metadata
LABEL MAINTAINER=xiaoyao,ren+github@gmail.com
LABEL org.opencontainers.image.title="efrecon/s3fs"
LABEL org.opencontainers.image.description="Mount S3 buckets from within a container and expose them to host/containers"
LABEL org.opencontainers.image.authors="Emmanuel Fr√©con <efrecon+github@gmail.com>"
LABEL org.opencontainers.image.url="https://github.com/efrecon/docker-s3fs-client"
LABEL org.opencontainers.image.documentation="https://github.com/efrecon/docker-s3fs-client/README.md"
LABEL org.opencontainers.image.source="https://github.com/efrecon/docker-s3fs-client/Dockerfile"

COPY --from=build /usr/bin/s3fs /usr/bin/s3fs

# Specify URL and secrets. When using AWS_S3_SECRET_ACCESS_KEY_FILE, the secret
# key will be read from that file itself, which helps passing further passwords
# using Docker secrets. You can either specify the path to an authorisation
# file, set environment variables with the key and the secret.
ENV AWS_S3_URL=https://dev-s3.inner.fuxi.netease.com
ENV AWS_S3_ACCESS_KEY_ID=
ENV AWS_S3_SECRET_ACCESS_KEY=
ENV AWS_S3_SECRET_ACCESS_KEY_FILE=
ENV AWS_S3_AUTHFILE=
ENV AWS_S3_BUCKET=

# User and group ID of share owner
ENV RUN_AS=
ENV UID=0
ENV GID=0

ENV DEBCONF_NOWARNINGS="yes"

# Location of directory where to mount the drive into the container.
ENV AWS_S3_MOUNT=/opt/s3fs/bucket

# s3fs tuning
ENV S3FS_DEBUG=0
ENV S3FS_ARGS=

ENV TINI_VERSION v0.19.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/local/bin/tini

RUN mkdir /opt/s3fs && \
   chmod +x /usr/local/bin/tini && \
   apt-get update && \
   apt-get install -y --no-install-recommends apt-utils \
   ca-certificates \
   libcurl3 \
   libxml2 \
   fuse \
   procps && \
   apt-get clean && rm -rf /var/lib/apt/lists/*
   

# allow access to volume by different user to enable UIDs other than root when using volumes
RUN echo user_allow_other >> /etc/fuse.conf

COPY *.sh /usr/local/bin/

WORKDIR /opt/s3fs

# Following should match the AWS_S3_MOUNT environment variable.
VOLUME [ "/opt/s3fs/bucket" ]

HEALTHCHECK \
  --interval=15s \
  --timeout=5s \
  --start-period=15s \
  --retries=2 \
  CMD [ "/usr/local/bin/healthcheck.sh" ]

# The default is to perform all system-level mounting as part of the entrypoint
# to then have a command that will keep listing the files under the main share.
# Listing the files will keep the share active and avoid that the remote server
# closes the connection.
ENTRYPOINT [ "/usr/local/bin/tini", "-g", "--", "docker-entrypoint.sh" ]
CMD [ "empty.sh" ]
